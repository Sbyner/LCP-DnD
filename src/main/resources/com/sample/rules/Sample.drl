package com.sample.rules
 
import creatures.*;
import mechanics.*;
import mechanics.effects.*;
import java.util.stream.Collectors;
import mechanics.Turn.State;
import mechanics.effects.Helped;
 
rule "Roll for initiative"
	salience 9001
	when
        turn : Turn(status == Turn.State.INIT)
        c : Creature()
    then
    	c.setStatPerm("initiative",Utils.roll("1d20", c.getAdvantage("initiative").getValue())+c.getBonus("initiative"));
        System.out.println( "Initiative: " + c.getName() );
        
        
end

rule "FIGHT START"
salience 9000
	when
		turn : Turn(status == Turn.State.INIT)
	then
		System.out.println("Gabibbo");
		turn.setStatus(Turn.State.TURNSTART);
		update(turn);
end

rule "RETRACT EFFECTS"
	salience 8900
	when
		turn : Turn(status == Turn.State.TURNSTART)
		c : Creature(!fought)
		act : Action(originCreature.name == c.name)
		eff : Effect(creature.name == c.name)
	then
	System.out.println(c.getName()+": retracting "+eff.toString());
	retract(eff);
end

rule "FIGHT STAGE"
	salience 8900
	when
		turn : Turn(status == Turn.State.TURNSTART)
		c : Creature(!fought)
		act : Action(originCreature.name == c.name)
		not Effect(creature.name == c.name)
	then
	modify(turn){setStatus(State.FIGHT)};
end

rule "START OF TURN"
no-loop 
	salience 8800
	when
		turn : Turn(status in (Turn.State.FIGHT))
		act : Action()
		c : Creature(name == act.originCreature.name)
	then
	//modify(turn){setStatus(State.FIGHT)};
	//working? switch to purely rule-based approach
	System.out.println(c.getName()+": Start of turn");
	c.getEffects().stream().forEach((x)->x.tick());
    c.updateEffects(c.getEffects().stream().filter((x)->!x.isOver()).collect(Collectors.toSet()));
    
    c.getEffects().stream().forEach((x)->System.out.println(x));
    
    c.getStats().stream().forEach((x)->x.restoreValue());
    c.getAdvantages().stream().forEach((x)->x.restoreValue());
	for(Effect eff: c.getEffects()){
		insertLogical( eff );
	};
	
	System.out.println(c.getName()+": ============================ of turn");
end

rule "TEST DODGE"
	salience 8800
	when
		turn : Turn(status == Turn.State.FIGHT)
		act : Action()
		c : Creature(name == act.originCreature.name)
		Dodge()
	then
	
	System.out.println(c.getName()+": This is a dodge");
end

rule "ATTACK"
lock-on-active 
salience 8700
	activation-group "ACTION"
	when
		turn : Turn(status == Turn.State.FIGHT)
		act : Action(type == Action.Type.ATTACK)
		c : Creature(name == act.originCreature.name)
		
	then
		c.getEffects().stream().forEach((x)->x.onAttack(c,act));
		act.getTargetCreature().getEffects().stream().forEach((x)->x.onAttack(act.getTargetCreature(),act));
		if(Utils.roll("1d20",c.getAdvantage("hit").getValue())>=act.getTargetCreature().getStat("ca").getValue()){
			System.out.println(c.getName()+" hit "+act.getTargetCreature().getName());
			act.getTargetCreature().modifyHp(-Utils.roll(c.getDamage(), Utils.Advantage.NO));
		} else System.out.println(c.getName()+" didn't hit "+act.getTargetCreature().getName());
		
		System.out.println(c.getName()+": Attack");
		c.setFought(true);
		update(c);
end

rule "CAST"
lock-on-active
salience 8700
	activation-group "ACTION"
	when
		turn : Turn(status == Turn.State.FIGHT)
		act : Action(type == Action.Type.CAST)
		c : Creature(name == act.originCreature.name)
		
	then
		//TODO cast
		System.out.println(c.getName()+": Cast");
		c.setFought(true);
end

rule "DODGE"
lock-on-active 
salience 8700
	activation-group "ACTION"
	when
		turn : Turn(status == Turn.State.FIGHT)
		act : Action(type == Action.Type.DODGE)
		c : Creature(name == act.originCreature.name)
		
	then
		Dodge dodge = new Dodge(c);
		c.getEffects().add(dodge);
		insertLogical(dodge);

		System.out.println(c.getName()+": Dodge");
		c.setFought(true);
		update(c);
		
end

rule "HELP"
lock-on-active
salience 8700
	activation-group "ACTION"
	when
		turn : Turn(status == Turn.State.FIGHT)
		act : Action(type == Action.Type.HELP)
		c : Creature(name == act.originCreature.name)
		
	then
		Helped help = new Helped(act.getTargetCreature());
		act.getTargetCreature().getEffects().add(help);
		insertLogical(help);
		System.out.println(c.getName()+": Help");
		c.setFought(true);
		update(c);
end


query "getCreatures"
	$result: Creature()
end



